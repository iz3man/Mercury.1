######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True

[gcode_macro START_PRINT]
description: All what needs to be done at print start
gcode:
    #SKEW_PROFILE LOAD=CaliFlower
    BED_MESH_CLEAR                           ; Clear bed mesh
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    M140 S{BED_TEMP}                         ; Start heating bed
    M104 S150                                ; Set nozzle to 150C
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP|int - 5} MAXIMUM={BED_TEMP|int + 5}
    M140 S0                                  ; Turn off bed heating
    SET_GCODE_OFFSET Z=0.0
    #{% if params.BED_TYPE == "Cool Plate" %}
    #   SET_GCODE_ADJUST Z_ADJUST=0.00
    #{% endif %}
    #{% if params.BED_TYPE == "Engineering Plate" %}
    #   SET_GCODE_ADJUST Z_ADJUST=0.00
    #{% endif %}
    #{% if params.BED_TYPE == "High Temp Plate" %}
    #   SET_GCODE_ADJUST Z_ADJUST=0.00
    #{% endif %}
    #{% if params.BED_TYPE == "Textured PEI Plate" %}
    #   SET_GCODE_ADJUST Z_ADJUST=0.00
    #{% endif %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28                                    ; speed Home if needed
    {% endif %}  
    M83                                      ; Extruder relative mode
    Z_TILT_ADJUST                            ; Adjust dual z-axis
    G28 Z                                    ; Redo z-homing    
    BED_MESH_CALIBRATE ADAPTIVE=1            ; KAMP calibrate
    #APPLY_BUILD_SHEET_ADJUSTMENT
    CLEAN_NOZZLE
    CARTOGRAPHER_TOUCH                       ; new touch feature
    G1 X5 Y230 F3000                         ; Get ready to prime
    M140 S{BED_TEMP}                         ; Set bed to temperature
    M104 S{EXTRUDER_TEMP}                    ; Set nozzle to temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP|int - 5} MAXIMUM={EXTRUDER_TEMP|int + 40}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP|int - 5} MAXIMUM={BED_TEMP|int + 40}
    G92 E0.0                                 ; Reset extruder length
    G90                                      ; Absolute positioning
    PRIME_LINE                               ; First move 
    SET_SKEW XY=100.4,99.55,70.64
    

[gcode_macro PRIME_LINE]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28                                    ; Home if needed
    {% endif %}  
   G90                                       ; Absolute coordinates
   {% if printer.extruder.temperature < 200 %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=200
   {% endif %} 
   TEMPERATURE_WAIT SENSOR=extruder MINIMUM=195
   G1 X5 Y230 F3000                          ; Get ready to prime
   G1 Z1                                     ; Lower nozzle
   G92 E0                                    ; Reset extrusion distance
   G1 X200 Y230 Z0.3 F1500.0 E30             ; Draw 1st line
   G1 X200 Y229.5 Z0.3 F5000.0               ; Move to side a little
   G1 X5 Y229.5 Z0.3 F1500.0 E30             ; Draw 2nd line
   G1 Z3.0 F3000                             ; Move z up 3mm to prevent scratching of surface
   G92 E0                                    ; Reset extruder
  
[gcode_macro END_PRINT]
gcode:
    SET_SKEW CLEAR=1
    M140 S0                                  ; Turn off bed
    M104 S0                                  ; Turn off nozzle
    M106 S0                                  ; Turn off fan
    G91                                      ; Relative coordinates
    G1 Z10 F3000                             ; Raise nozzle 10mm
    G90                                      ; Absolute coordinates
    G1 E-3 F300                              ; Retract 3mm
    G1 X220 Y200 F5000                       ; Move to right back
    M84                                      ; Disable steppers

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state    

[gcode_macro LOAD_FILAMENT]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 M104 S225             # Set nozzle to temperature
 TEMPERATURE_WAIT SENSOR=extruder MINIMUM={210|int - 5} MAXIMUM={250|int + 5}
 G1 E90 F1500          # Move the extruder forward 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.

[gcode_macro UNLOAD_FILAMENT]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 M104 S225             # Set nozzle to temperature
 TEMPERATURE_WAIT SENSOR=extruder MINIMUM={210|int - 5} MAXIMUM={250|int + 5}
 G1 E-90 F1500         # Move the extruder forward 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel/2} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED    

[gcode_macro ZICKZACK]
variable_runs: 5

gcode:
  G28 ; home all
  G1 Z5 F3000 ; move z up

  {% for run in range(1, (runs + 1)) %}
    G1 X0 Y0 F{3000*run}
    G1 X0 Y230 F{3000*run}
    G1 X230 Y230 F{3000*run}
    G1 X230 Y0 F{3000*run}
    G1 X0 Y0 F{3000*run}
    G1 X230 Y230 F{3000*run}
    G1 X0 Y0 F{3000*run}
    G1 X0 Y230 F{3000*run}
    G1 X230 Y0 F{3000*run}
    G1 X0 Y230 F{3000*run}
  {% endfor %}

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 115
variable_start_y: -17
variable_start_z: 1.5
variable_wipe_dist_y: -3
variable_wipe_qty: 5
variable_wipe_spd: 10000
variable_raise_distance: 3

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90
 ## Move nozzle to start position

  G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z} F1500
 
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 15} Y{start_y - wipe_dist_y} F{wipe_spd}
   G1 X{start_x + 12} Y{start_y + wipe_dist_y} F{wipe_spd}
   G1 X{start_x + 9} Y{start_y - wipe_dist_y} F{wipe_spd}
   G1 X{start_x + 6} Y{start_y + wipe_dist_y} F{wipe_spd}
   G1 X{start_x + 3} Y{start_y - wipe_dist_y} F{wipe_spd}
   #WIPE RIGHT
   G1 X{start_x - 3} Y{start_y + wipe_dist_y} F{wipe_spd}
   G1 X{start_x - 6} Y{start_y - wipe_dist_y} F{wipe_spd}
   G1 X{start_x - 9} Y{start_y + wipe_dist_y} F{wipe_spd}
   G1 X{start_x - 12} Y{start_y - wipe_dist_y} F{wipe_spd}
   G1 X{start_x - 15} Y{start_y + wipe_dist_y} F{wipe_spd}
 {% endfor %}

 ## Raise nozzle after complete
 G1 X10 Y0 F3600

## Macro to install a build sheet
[gcode_macro INSTALL_BUILD_SHEET]
description: Install a build sheet and save settings
variable_parameter_NAME: "Unknown Build Sheet"
variable_parameter_OFFSET: 0.0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sheet_name = (params.NAME | default("Unknown Build Sheet") | string) %}    
    {% set sheet_offset = (params.OFFSET | default(0.0) | float) %}
    {% set sheet_key = ("build_sheet " ~ (sheet_name | lower | replace(" ", "_"))) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if not sheet %}
        # the sheet does not exist, create it
        {% set sheet_literal = ('{"name": "%s", "offset": %.3f}' % (sheet_name, sheet_offset)) %}
        SAVE_VARIABLE VARIABLE="{sheet_key}" VALUE='{sheet_literal}'
    {% endif %}
    SAVE_VARIABLE VARIABLE="build_sheet installed" VALUE="'{sheet_key}'"
    SHOW_BUILD_SHEET

[gcode_macro SHOW_BUILD_SHEET]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if sheet %}
        {action_respond_info("Build sheet: %s, Offset: %.3fmm" % (sheet.name, sheet.offset))}
    {% else %}
        {action_respond_info("No build sheet installed") }
    {% endif %}

[gcode_macro SET_BUILD_SHEET_OFFSET]
description: Set an arbitrary offset for the build sheet
variable_parameter_OFFSET: 0.0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sheet_offset = (params.OFFSET | default(0.0) | float) %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if sheet %}
        {% set sheet_literal = ('{"name": "%s", "offset": %.3f}' % (sheet.name, sheet_offset)) %}
        SAVE_VARIABLE VARIABLE="{sheet_key}" VALUE='{sheet_literal}'
    {% endif %}
    SHOW_BUILD_SHEET

[gcode_macro RESET_BUILD_SHEET_OFFSET]
description: Set the build sheet offset to 0.0
gcode:
    SET_BUILD_SHEET_OFFSET OFFSET=0.0

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _BUILD_SHEETS__SET_GCODE_OFFSET
gcode:
    # this runs first so if the caller messed up the params it failes
    _BUILD_SHEETS__SET_GCODE_OFFSET {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    {% set svv = printer.save_variables.variables %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if sheet and (params.Z_ADJUST is defined) and ((params.Z_ADJUST | float) != 0.0) and ((params.MOVE | int) == 1) %}
        {% set offset = (sheet.offset + (params.Z_ADJUST | default(0.0) | float)) %}
        {% set sheet_literal = ('{"name": "%s", "offset": %.3f}' % (sheet.name, offset)) %}
        SAVE_VARIABLE VARIABLE="{sheet_key}" VALUE='{sheet_literal}'
        SHOW_BUILD_SHEET
    {% endif %}

[gcode_macro APPLY_BUILD_SHEET_ADJUSTMENT]
description: Applies the sheet offset adjustment for the installed build sheet, call from your PRINT_START macro
gcode:
    # get the offset from saved variables
    {% set svv = printer.save_variables.variables %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if sheet %}
        # log this to the console so if there is an issue with the print the user can see which sheet the printer thought it had installed
        {action_respond_info("Applying offset: %.3fmm for build sheet: %s" % (sheet.offset, sheet.name))}
        _BUILD_SHEETS__SET_GCODE_OFFSET Z_ADJUST={sheet.offset} MOVE=1
    {% else %}
        {action_respond_info("No build sheet installed, offset adjustment: 0.000mm") }
    {% endif %}

[gcode_macro INSTALL_TEXTURED_PEI]
gcode:
  INSTALL_BUILD_SHEET NAME="Textured PEI"

[gcode_macro INSTALL_PEI_SHEET]
gcode:
  INSTALL_BUILD_SHEET NAME="PEI Sheet"

[gcode_macro INSTALL_GFK]
gcode:
  INSTALL_BUILD_SHEET NAME="GFK"  
    